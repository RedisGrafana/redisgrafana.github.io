{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Redis plug-ins for Grafana \u00b6 The Redis plug-ins for Grafana allow users to connect to the Redis databases and build dashboards in Grafana to easily monitor Redis and application data. Grafana Only Grafana 7.1 and later with a new plug-in platform supports Redis plug-in. Plug-ins are registered in the Grafana repository and available to Grafana , Grafana Enterprise and Grafana Cloud . Where Next? \u00b6 The Quickstart is the recommended starting point. The Commands reference all supported commands in Redis Data Source. The Custom Panels page provides information about all custom panels included in Redis Application plug-in. The Development section has more information about the nightly built Docker Images and developing plug-ins. Grafana Repository \u00b6 Redis Data Source for Grafana Redis Application plug-in Learn More \u00b6 Introducing the Redis Data Source Plug-in for Grafana How to Use the New Redis Data Source for Grafana Plug-in 3 Real-Life Apps Built with Redis Data Source for Grafana Real-time observability with Redis and Grafana Contact Us \u00b6 If you have questions or feedback, or want to report an issue, here's where you can get in touch: Redis Data Source Redis Application plug-in Redis Explorer plug-in Documentation updates License \u00b6 Redis plug-ins for Grafana are licensed under the Apache License Version 2.0 .","title":"Home"},{"location":"#redis-plug-ins-for-grafana","text":"The Redis plug-ins for Grafana allow users to connect to the Redis databases and build dashboards in Grafana to easily monitor Redis and application data. Grafana Only Grafana 7.1 and later with a new plug-in platform supports Redis plug-in. Plug-ins are registered in the Grafana repository and available to Grafana , Grafana Enterprise and Grafana Cloud .","title":" Redis plug-ins for Grafana"},{"location":"#where-next","text":"The Quickstart is the recommended starting point. The Commands reference all supported commands in Redis Data Source. The Custom Panels page provides information about all custom panels included in Redis Application plug-in. The Development section has more information about the nightly built Docker Images and developing plug-ins.","title":"Where Next?"},{"location":"#grafana-repository","text":"Redis Data Source for Grafana Redis Application plug-in","title":"Grafana Repository"},{"location":"#learn-more","text":"Introducing the Redis Data Source Plug-in for Grafana How to Use the New Redis Data Source for Grafana Plug-in 3 Real-Life Apps Built with Redis Data Source for Grafana Real-time observability with Redis and Grafana","title":"Learn More"},{"location":"#contact-us","text":"If you have questions or feedback, or want to report an issue, here's where you can get in touch: Redis Data Source Redis Application plug-in Redis Explorer plug-in Documentation updates","title":"Contact Us"},{"location":"#license","text":"Redis plug-ins for Grafana are licensed under the Apache License Version 2.0 .","title":"License"},{"location":"faq/","text":"FAQ \u00b6 Redis Data Source \u00b6 Plugin health check failed \u00b6 Redis Data Source binaries should have executable permissions for Grafana to be able to execute it. Check out Quickstart page for more information. Redis_datasource_darwin_amd64 cannot be opened because the developer cannot be verified \u00b6 Go to System Preferences > Security & Privacy and set to allow redis-datasource_darwin_amd64 . Does Redis Data Source support Redis Cluster and Sentinel? \u00b6 Redis Cluster and Sentinel supported since version Redis Data Source version 1.2.0. Check out Configuration page for detailed information. Redis Explorer plug-in \u00b6 How to use Redis plug-in with Redis Enterprise clusters? \u00b6 Redis Explorer plug-in allows to connect to Redis Enterprise clusters using REST API and configure Redis Data Sources for cluster's databases.","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#redis-data-source","text":"","title":"Redis Data Source"},{"location":"faq/#plugin-health-check-failed","text":"Redis Data Source binaries should have executable permissions for Grafana to be able to execute it. Check out Quickstart page for more information.","title":"Plugin health check failed"},{"location":"faq/#redis_datasource_darwin_amd64-cannot-be-opened-because-the-developer-cannot-be-verified","text":"Go to System Preferences > Security & Privacy and set to allow redis-datasource_darwin_amd64 .","title":"Redis_datasource_darwin_amd64 cannot be opened because the developer cannot be verified"},{"location":"faq/#does-redis-data-source-support-redis-cluster-and-sentinel","text":"Redis Cluster and Sentinel supported since version Redis Data Source version 1.2.0. Check out Configuration page for detailed information.","title":"Does Redis Data Source support Redis Cluster and Sentinel?"},{"location":"faq/#redis-explorer-plug-in","text":"","title":"Redis Explorer plug-in"},{"location":"faq/#how-to-use-redis-plug-in-with-redis-enterprise-clusters","text":"Redis Explorer plug-in allows to connect to Redis Enterprise clusters using REST API and configure Redis Data Sources for cluster's databases.","title":"How to use Redis plug-in with Redis Enterprise clusters?"},{"location":"projects/","text":"Projects \u00b6 The following sections consist of various projects showing the uses for Redis plug-ins for Grafana. Contribute To contibute your project, click the \"Edit this page\" button at the top to submit a Pull Request. How many times Redis Data Source for Grafana was downloaded? \u00b6 Earlier this month, Redis Labs released the new Redis Data Source for Grafana plug-in, which connects the widely used open source application monitoring tool to Redis. To give you an idea of how it all works, let\u2019s take a look at a self-referential example: using the plug-in to see how many times it has been downloaded over time. (The Grafana plug-in repository itself does not provide such statistics out of the box.). Read more at Redis Labs blog . This project collect plug-ins statistics from Grafana repository using RedisTimeSeries : GitHub Repository https://github.com/RedisGrafana/grafana-plugin-stats Pop-up store demo using RedisTimeSeries, RedisGears and Redis Data Source \u00b6 I am a big fan of Redis Streams, a new data type introduced in Redis 5.0, and I was looking for a fast and simple solution to monitor queues for data processing. While working on the Redis Data Source, our team started to explore RedisGears\u2014a dynamic framework that lets developers write and execute functions that implement data flows in Redis while abstracting away the data\u2019s distribution and deployment\u2014for another project and we decided to use them together for this data-pipeline demo for a pop-up store. Read more at Redis Labs blog . The Pop-up store demo is using Redis Streams , RedisTimeSeries , RedisGears and Redis Data Source to visualize real-time data pipeline in Grafana. GitHub Repository https://github.com/RedisTimeSeries/redis-pop-up-store","title":"Projects"},{"location":"projects/#projects","text":"The following sections consist of various projects showing the uses for Redis plug-ins for Grafana. Contribute To contibute your project, click the \"Edit this page\" button at the top to submit a Pull Request.","title":"Projects"},{"location":"projects/#how-many-times-redis-data-source-for-grafana-was-downloaded","text":"Earlier this month, Redis Labs released the new Redis Data Source for Grafana plug-in, which connects the widely used open source application monitoring tool to Redis. To give you an idea of how it all works, let\u2019s take a look at a self-referential example: using the plug-in to see how many times it has been downloaded over time. (The Grafana plug-in repository itself does not provide such statistics out of the box.). Read more at Redis Labs blog . This project collect plug-ins statistics from Grafana repository using RedisTimeSeries : GitHub Repository https://github.com/RedisGrafana/grafana-plugin-stats","title":"How many times Redis Data Source for Grafana was downloaded?"},{"location":"projects/#pop-up-store-demo-using-redistimeseries-redisgears-and-redis-data-source","text":"I am a big fan of Redis Streams, a new data type introduced in Redis 5.0, and I was looking for a fast and simple solution to monitor queues for data processing. While working on the Redis Data Source, our team started to explore RedisGears\u2014a dynamic framework that lets developers write and execute functions that implement data flows in Redis while abstracting away the data\u2019s distribution and deployment\u2014for another project and we decided to use them together for this data-pipeline demo for a pop-up store. Read more at Redis Labs blog . The Pop-up store demo is using Redis Streams , RedisTimeSeries , RedisGears and Redis Data Source to visualize real-time data pipeline in Grafana. GitHub Repository https://github.com/RedisTimeSeries/redis-pop-up-store","title":"Pop-up store demo using RedisTimeSeries, RedisGears and Redis Data Source"},{"location":"quickstart/","text":"Quickstart \u00b6 Install using grafana-cli \u00b6 Use the grafana-cli tool to install from the commandline. Redis Application plug-in and Redis Data Source grafana-cli plugins install redis-app Redis Data Source grafana-cli plugins install redis-datasource Run using Docker \u00b6 Login to Grafana Username and password is admin / admin . Redis Application plug-in and Redis Data Source docker run -d -p 3000 :3000 --name = grafana -e \"GF_INSTALL_PLUGINS=redis-app\" grafana/grafana Redis Data Source docker run -d -p 3000 :3000 --name = grafana -e \"GF_INSTALL_PLUGINS=redis-datasource\" grafana/grafana Install without Internet access \u00b6 Redis Data Source \u00b6 Download the latest version from Releases . Unzip archive to plugins/ folder for local Grafana installation or Docker plug-ins volume. Check permissions for redis-datasource binaries: Permissions Redis Data Source binaries should have executable permissions for Grafana to be able to execute it. % ls -lrt redis-datasource* -rwxr-xr-x 1 mikhail staff 13077504 Mar 20 11 :20 redis-datasource_windows_amd64.exe -rwxr-xr-x 1 mikhail staff 11796480 Mar 20 11 :20 redis-datasource_linux_arm64 -rwxr-xr-x 1 mikhail staff 10682368 Mar 20 11 :20 redis-datasource_linux_arm -rwxr-xr-x 1 mikhail staff 12644352 Mar 20 11 :20 redis-datasource_linux_amd64 -rwxr-xr-x 1 mikhail staff 13806272 Mar 20 11 :20 redis-datasource_darwin_amd64 Check that plug-in was registered: t = 2020 -07-01T06:03:38+0000 lvl = info msg = \"Starting plugin search\" logger = plugins t = 2020 -07-01T06:03:38+0000 lvl = warn msg = \"Running an unsigned backend plugin\" logger = plugins pluginID = redis-datasource pluginDir = /var/lib/grafana/plugins/redis-datasource t = 2020 -07-01T06:03:38+0000 lvl = info msg = \"Registering plugin\" logger = plugins name = redis-datasource t = 2020 -07-01T06:03:38+0000 lvl = info msg = \"HTTP Server Listen\" logger = http.server address =[ :: ] :3000 protocol = http subUrl = socket = Redis Application plug-in \u00b6 Download the latest version from Releases . Unzip archive to plugins/ folder for local Grafana installation or Docker plug-ins volume. Enable Redis Application plug-in \u00b6 Redis Application plug-in is disabled by default. To enable: Go to Configuration -> Plugins and choose Redis Application plug-in. Click Enable to add side menu, Custom panels and import Dashboards . Configuration \u00b6 Redis Data Source \u00b6 The Redis Data Source Configuration page explains how to connect data source to Redis database.","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"quickstart/#install-using-grafana-cli","text":"Use the grafana-cli tool to install from the commandline. Redis Application plug-in and Redis Data Source grafana-cli plugins install redis-app Redis Data Source grafana-cli plugins install redis-datasource","title":"Install using grafana-cli"},{"location":"quickstart/#run-using-docker","text":"Login to Grafana Username and password is admin / admin . Redis Application plug-in and Redis Data Source docker run -d -p 3000 :3000 --name = grafana -e \"GF_INSTALL_PLUGINS=redis-app\" grafana/grafana Redis Data Source docker run -d -p 3000 :3000 --name = grafana -e \"GF_INSTALL_PLUGINS=redis-datasource\" grafana/grafana","title":"Run using Docker"},{"location":"quickstart/#install-without-internet-access","text":"","title":"Install without Internet access"},{"location":"quickstart/#redis-data-source","text":"Download the latest version from Releases . Unzip archive to plugins/ folder for local Grafana installation or Docker plug-ins volume. Check permissions for redis-datasource binaries: Permissions Redis Data Source binaries should have executable permissions for Grafana to be able to execute it. % ls -lrt redis-datasource* -rwxr-xr-x 1 mikhail staff 13077504 Mar 20 11 :20 redis-datasource_windows_amd64.exe -rwxr-xr-x 1 mikhail staff 11796480 Mar 20 11 :20 redis-datasource_linux_arm64 -rwxr-xr-x 1 mikhail staff 10682368 Mar 20 11 :20 redis-datasource_linux_arm -rwxr-xr-x 1 mikhail staff 12644352 Mar 20 11 :20 redis-datasource_linux_amd64 -rwxr-xr-x 1 mikhail staff 13806272 Mar 20 11 :20 redis-datasource_darwin_amd64 Check that plug-in was registered: t = 2020 -07-01T06:03:38+0000 lvl = info msg = \"Starting plugin search\" logger = plugins t = 2020 -07-01T06:03:38+0000 lvl = warn msg = \"Running an unsigned backend plugin\" logger = plugins pluginID = redis-datasource pluginDir = /var/lib/grafana/plugins/redis-datasource t = 2020 -07-01T06:03:38+0000 lvl = info msg = \"Registering plugin\" logger = plugins name = redis-datasource t = 2020 -07-01T06:03:38+0000 lvl = info msg = \"HTTP Server Listen\" logger = http.server address =[ :: ] :3000 protocol = http subUrl = socket =","title":"Redis Data Source"},{"location":"quickstart/#redis-application-plug-in","text":"Download the latest version from Releases . Unzip archive to plugins/ folder for local Grafana installation or Docker plug-ins volume.","title":"Redis Application plug-in"},{"location":"quickstart/#enable-redis-application-plug-in","text":"Redis Application plug-in is disabled by default. To enable: Go to Configuration -> Plugins and choose Redis Application plug-in. Click Enable to add side menu, Custom panels and import Dashboards .","title":"Enable Redis Application plug-in"},{"location":"quickstart/#configuration","text":"","title":"Configuration"},{"location":"quickstart/#redis-data-source_1","text":"The Redis Data Source Configuration page explains how to connect data source to Redis database.","title":"Redis Data Source"},{"location":"development/images/","text":"Docker Images \u00b6 Interested to try the latest features and verify bug fixes? Start nightly built Docker image. Supported platforms are: linux/amd64 linux/arm64 linux/arm Unstable Images built from main branch and recommended for Testing new features and bugfixes only. Login to Grafana Username and password to login to Grafana is admin / admin . Redis Application plug-in \u00b6 The Redis Application, is a plug-in for Grafana that provides application pages and Custom panels for Redis Data Source. docker run -p 3000 :3000 --name = redis-app ghcr.io/redisgrafana/redis-app:latest Redis Explorer plug-in \u00b6 The Redis Explorer, is a plug-in for Grafana that allows users to connect to Redis Enterprise software clusters using REST API and build dashboards to observe their status. docker run -p 3000 :3000 --name = explorer ghcr.io/redisgrafana/redis-explorer:latest","title":"Docker Images"},{"location":"development/images/#docker-images","text":"Interested to try the latest features and verify bug fixes? Start nightly built Docker image. Supported platforms are: linux/amd64 linux/arm64 linux/arm Unstable Images built from main branch and recommended for Testing new features and bugfixes only. Login to Grafana Username and password to login to Grafana is admin / admin .","title":"Docker Images"},{"location":"development/images/#redis-application-plug-in","text":"The Redis Application, is a plug-in for Grafana that provides application pages and Custom panels for Redis Data Source. docker run -p 3000 :3000 --name = redis-app ghcr.io/redisgrafana/redis-app:latest","title":"Redis Application plug-in"},{"location":"development/images/#redis-explorer-plug-in","text":"The Redis Explorer, is a plug-in for Grafana that allows users to connect to Redis Enterprise software clusters using REST API and build dashboards to observe their status. docker run -p 3000 :3000 --name = explorer ghcr.io/redisgrafana/redis-explorer:latest","title":"Redis Explorer plug-in"},{"location":"development/redis-app/","text":"Developing Redis Application plug-in for Grafana \u00b6 Developing Application plug-in involves setting up the development environment (which can be either Linux-based or macOS-based), building and running tests. Install Grafana \u00b6 Grafana can be used in Docker or installed locally: Follow Installation instructions to install and start Grafana Open Grafana UI in web-browser http://X.X.X.X:3000 Clone repository \u00b6 git clone https://github.com/RedisGrafana/grafana-redis-app.git Build Application \u00b6 Install the latest version of Node.js using Node Version Manager or download binaries Install yarn globally npm install yarn -g Install dependencies yarn install Build frontend components yarn build Start Grafana \u00b6 Docker Compose Prerequisite Docker Compose should be pre-installed following documentation . yarn start:dev Docker-compose file for Development includes: Service redis using Redismod Service grafana using Grafana which allow loading unsigned plugins redis-app and redis-datasource Redis Data Source Redis Data Source should be cloned and built following Instructions . version: \"3.4\" services: redis: container_name: redismod image: redislabs/redismod:latest ports: - 6379 :6379/tcp # Uncomment and edit the local path in the following line to have # Redis' data persisted to the host's filesystem. # volumes: # - ./dump.rdb:/data/dump.rdb grafana: container_name: grafana image: grafana/grafana:latest ports: - 3000 :3000/tcp environment: - GF_AUTH_ANONYMOUS_ORG_ROLE = Admin - GF_AUTH_ANONYMOUS_ENABLED = true - GF_AUTH_BASIC_ENABLED = false - GF_ENABLE_GZIP = true - GF_USERS_DEFAULT_THEME = light - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS = redis-app,redis-datasource # Uncomment to run in debug mode # - GF_LOG_LEVEL=debug volumes: # Redis Data Source should be cloned and built - ../../grafana-redis-datasource/dist:/var/lib/grafana/plugins/redis-datasource - ../dist:/var/lib/grafana/plugins/redis-app - ../provisioning/datasources:/etc/grafana/provisioning/datasources - ../provisioning/plugins:/etc/grafana/provisioning/plugins # Uncomment to preserve Grafana configuration # - ./data:/var/lib/grafana Update local Grafana Configuration Move distribution to Grafana's plugins/ folder mv dist/ /var/lib/grafana/plugins/redis-app Add redis-app to allowed unsigned plugins vi /etc/grafana/grafana.ini [ plugins ] ; enable_alpha = false ; app_tls_skip_verify_insecure = false # Enter a comma-separated list of plugin identifiers to identify plugins that are allowed to be loaded even if they lack a valid signature. allow_loading_unsigned_plugins = redis-datasource,redis-app Restart and verify that plugin is registered tail -100 /var/log/grafana/grafana.log Enable Redis Application plug-in \u00b6 Redis Application plug-in is disabled by default. To enable: Go to Configuration -> Plugins and choose Redis Application plug-in. Click Enable to add side menu, Custom panels and import Dashboards . Contact Us \u00b6 If you have questions, enhancement ideas or running into issues, please open an issue .","title":"Redis Application plug-in"},{"location":"development/redis-app/#developing-redis-application-plug-in-for-grafana","text":"Developing Application plug-in involves setting up the development environment (which can be either Linux-based or macOS-based), building and running tests.","title":"Developing Redis Application plug-in for Grafana"},{"location":"development/redis-app/#install-grafana","text":"Grafana can be used in Docker or installed locally: Follow Installation instructions to install and start Grafana Open Grafana UI in web-browser http://X.X.X.X:3000","title":"Install Grafana"},{"location":"development/redis-app/#clone-repository","text":"git clone https://github.com/RedisGrafana/grafana-redis-app.git","title":"Clone repository"},{"location":"development/redis-app/#build-application","text":"Install the latest version of Node.js using Node Version Manager or download binaries Install yarn globally npm install yarn -g Install dependencies yarn install Build frontend components yarn build","title":"Build Application"},{"location":"development/redis-app/#start-grafana","text":"Docker Compose Prerequisite Docker Compose should be pre-installed following documentation . yarn start:dev Docker-compose file for Development includes: Service redis using Redismod Service grafana using Grafana which allow loading unsigned plugins redis-app and redis-datasource Redis Data Source Redis Data Source should be cloned and built following Instructions . version: \"3.4\" services: redis: container_name: redismod image: redislabs/redismod:latest ports: - 6379 :6379/tcp # Uncomment and edit the local path in the following line to have # Redis' data persisted to the host's filesystem. # volumes: # - ./dump.rdb:/data/dump.rdb grafana: container_name: grafana image: grafana/grafana:latest ports: - 3000 :3000/tcp environment: - GF_AUTH_ANONYMOUS_ORG_ROLE = Admin - GF_AUTH_ANONYMOUS_ENABLED = true - GF_AUTH_BASIC_ENABLED = false - GF_ENABLE_GZIP = true - GF_USERS_DEFAULT_THEME = light - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS = redis-app,redis-datasource # Uncomment to run in debug mode # - GF_LOG_LEVEL=debug volumes: # Redis Data Source should be cloned and built - ../../grafana-redis-datasource/dist:/var/lib/grafana/plugins/redis-datasource - ../dist:/var/lib/grafana/plugins/redis-app - ../provisioning/datasources:/etc/grafana/provisioning/datasources - ../provisioning/plugins:/etc/grafana/provisioning/plugins # Uncomment to preserve Grafana configuration # - ./data:/var/lib/grafana Update local Grafana Configuration Move distribution to Grafana's plugins/ folder mv dist/ /var/lib/grafana/plugins/redis-app Add redis-app to allowed unsigned plugins vi /etc/grafana/grafana.ini [ plugins ] ; enable_alpha = false ; app_tls_skip_verify_insecure = false # Enter a comma-separated list of plugin identifiers to identify plugins that are allowed to be loaded even if they lack a valid signature. allow_loading_unsigned_plugins = redis-datasource,redis-app Restart and verify that plugin is registered tail -100 /var/log/grafana/grafana.log","title":"Start Grafana"},{"location":"development/redis-app/#enable-redis-application-plug-in","text":"Redis Application plug-in is disabled by default. To enable: Go to Configuration -> Plugins and choose Redis Application plug-in. Click Enable to add side menu, Custom panels and import Dashboards .","title":"Enable Redis Application plug-in"},{"location":"development/redis-app/#contact-us","text":"If you have questions, enhancement ideas or running into issues, please open an issue .","title":"Contact Us"},{"location":"development/redis-datasource/","text":"Developing Redis Data Source for Grafana \u00b6 Developing Redis Data Source involves setting up the development environment (which can be either Linux-based or macOS-based), building and running tests. Install Grafana \u00b6 Grafana can be started in Docker or installed locally: Follow Installation instructions to install and start Grafana Open Grafana UI in web-browser http://X.X.X.X:3000 Clone repository \u00b6 git clone https://github.com/RedisGrafana/grafana-redis-datasource.git Build Data Source Frontend \u00b6 Install the latest version of Node.js using Node Version Manager or download binaries Install yarn globally npm install yarn -g Install dependencies yarn install Build frontend components yarn build Build Data Source Backend \u00b6 Install Golang for your platform yum install go Install Grafana plugin SDK for Go dependency go get -u github.com/grafana/grafana-plugin-sdk-go Install Mage (make-like build tool using Go) git clone https://github.com/magefile/mage cd mage go run bootstrap.go Build backend binaries for Linux, Windows and MacOS for supported platforms yarn build:backend Start Grafana \u00b6 Docker Compose Prerequisite Docker Compose should be pre-installed following documentation . yarn start:dev Update local Grafana Configuration Move distribution to Grafana's plugins/ folder mv dist/ /var/lib/grafana/plugins/redis-datasource Add redis-datasource to allowed unsigned plugins vi /etc/grafana/grafana.ini [ plugins ] ; enable_alpha = false ; app_tls_skip_verify_insecure = false # Enter a comma-separated list of plugin identifiers to identify plugins that are allowed to be loaded even if they lack a valid signature. allow_loading_unsigned_plugins = redis-datasource Restart Grafana and verify that plugin registered tail -100 /var/log/grafana/grafana.log t = 2020 -07-01T06:03:38+0000 lvl = info msg = \"Starting plugin search\" logger = plugins t = 2020 -07-01T06:03:38+0000 lvl = warn msg = \"Running an unsigned backend plugin\" logger = plugins pluginID = redis-datasource pluginDir = /var/lib/grafana/plugins/redis-datasource t = 2020 -07-01T06:03:38+0000 lvl = info msg = \"Registering plugin\" logger = plugins name = redis-datasource t = 2020 -07-01T06:03:38+0000 lvl = info msg = \"HTTP Server Listen\" logger = http.server address =[ :: ] :3000 protocol = http subUrl = socket = Configure Redis Data Source \u00b6 The Redis Data Source Configuration page explains how to connect data source to Redis database. Contact Us \u00b6 If you have questions, enhancement ideas or running into issues, please open an issue .","title":"Redis Data Source"},{"location":"development/redis-datasource/#developing-redis-data-source-for-grafana","text":"Developing Redis Data Source involves setting up the development environment (which can be either Linux-based or macOS-based), building and running tests.","title":"Developing Redis Data Source for Grafana"},{"location":"development/redis-datasource/#install-grafana","text":"Grafana can be started in Docker or installed locally: Follow Installation instructions to install and start Grafana Open Grafana UI in web-browser http://X.X.X.X:3000","title":"Install Grafana"},{"location":"development/redis-datasource/#clone-repository","text":"git clone https://github.com/RedisGrafana/grafana-redis-datasource.git","title":"Clone repository"},{"location":"development/redis-datasource/#build-data-source-frontend","text":"Install the latest version of Node.js using Node Version Manager or download binaries Install yarn globally npm install yarn -g Install dependencies yarn install Build frontend components yarn build","title":"Build Data Source Frontend"},{"location":"development/redis-datasource/#build-data-source-backend","text":"Install Golang for your platform yum install go Install Grafana plugin SDK for Go dependency go get -u github.com/grafana/grafana-plugin-sdk-go Install Mage (make-like build tool using Go) git clone https://github.com/magefile/mage cd mage go run bootstrap.go Build backend binaries for Linux, Windows and MacOS for supported platforms yarn build:backend","title":"Build Data Source Backend"},{"location":"development/redis-datasource/#start-grafana","text":"Docker Compose Prerequisite Docker Compose should be pre-installed following documentation . yarn start:dev Update local Grafana Configuration Move distribution to Grafana's plugins/ folder mv dist/ /var/lib/grafana/plugins/redis-datasource Add redis-datasource to allowed unsigned plugins vi /etc/grafana/grafana.ini [ plugins ] ; enable_alpha = false ; app_tls_skip_verify_insecure = false # Enter a comma-separated list of plugin identifiers to identify plugins that are allowed to be loaded even if they lack a valid signature. allow_loading_unsigned_plugins = redis-datasource Restart Grafana and verify that plugin registered tail -100 /var/log/grafana/grafana.log t = 2020 -07-01T06:03:38+0000 lvl = info msg = \"Starting plugin search\" logger = plugins t = 2020 -07-01T06:03:38+0000 lvl = warn msg = \"Running an unsigned backend plugin\" logger = plugins pluginID = redis-datasource pluginDir = /var/lib/grafana/plugins/redis-datasource t = 2020 -07-01T06:03:38+0000 lvl = info msg = \"Registering plugin\" logger = plugins name = redis-datasource t = 2020 -07-01T06:03:38+0000 lvl = info msg = \"HTTP Server Listen\" logger = http.server address =[ :: ] :3000 protocol = http subUrl = socket =","title":"Start Grafana"},{"location":"development/redis-datasource/#configure-redis-data-source","text":"The Redis Data Source Configuration page explains how to connect data source to Redis database.","title":"Configure Redis Data Source"},{"location":"development/redis-datasource/#contact-us","text":"If you have questions, enhancement ideas or running into issues, please open an issue .","title":"Contact Us"},{"location":"development/redis-explorer/","text":"Developing Redis Explorer plug-in for Grafana \u00b6 Developing Explorer plug-in involves setting up the development environment (which can be either Linux-based or macOS-based), building and running tests. Install Grafana \u00b6 Grafana can be used in Docker or installed locally: Follow Installation instructions to install and start Grafana Open Grafana UI in web-browser http://X.X.X.X:3000 Clone repository \u00b6 git clone https://github.com/RedisGrafana/grafana-redis-explorer.git Build Explorer \u00b6 Install the latest version of Node.js using Node Version Manager or download binaries Install yarn globally npm install yarn -g Install dependencies yarn install Build frontend components yarn build Start Grafana \u00b6 Docker Compose Prerequisite Docker Compose should be pre-installed following documentation . yarn start:dev Update local Grafana Configuration Move distribution to Grafana's plugins/ folder mv dist/ /var/lib/grafana/plugins/redis-explorer Add redis-explorer to allowed unsigned plugins vi /etc/grafana/grafana.ini [ plugins ] ; enable_alpha = false ; app_tls_skip_verify_insecure = false # Enter a comma-separated list of plugin identifiers to identify plugins that are allowed to be loaded even if they lack a valid signature. allow_loading_unsigned_plugins = redis-explorer Restart Grafana and verify that plugin is registered tail -100 /var/log/grafana/grafana.log Enable Redis Explorer plug-in \u00b6 Redis Explorer plug-in is disabled by default. To enable: Go to Configuration -> Plugins and choose Redis Explorer plug-in. Click Enable to add side menu, Data Sources and import Dashboards. Contact Us \u00b6 If you have questions, enhancement ideas or running into issues, please open an issue .","title":"Redis Explorer plug-in"},{"location":"development/redis-explorer/#developing-redis-explorer-plug-in-for-grafana","text":"Developing Explorer plug-in involves setting up the development environment (which can be either Linux-based or macOS-based), building and running tests.","title":"Developing Redis Explorer plug-in for Grafana"},{"location":"development/redis-explorer/#install-grafana","text":"Grafana can be used in Docker or installed locally: Follow Installation instructions to install and start Grafana Open Grafana UI in web-browser http://X.X.X.X:3000","title":"Install Grafana"},{"location":"development/redis-explorer/#clone-repository","text":"git clone https://github.com/RedisGrafana/grafana-redis-explorer.git","title":"Clone repository"},{"location":"development/redis-explorer/#build-explorer","text":"Install the latest version of Node.js using Node Version Manager or download binaries Install yarn globally npm install yarn -g Install dependencies yarn install Build frontend components yarn build","title":"Build Explorer"},{"location":"development/redis-explorer/#start-grafana","text":"Docker Compose Prerequisite Docker Compose should be pre-installed following documentation . yarn start:dev Update local Grafana Configuration Move distribution to Grafana's plugins/ folder mv dist/ /var/lib/grafana/plugins/redis-explorer Add redis-explorer to allowed unsigned plugins vi /etc/grafana/grafana.ini [ plugins ] ; enable_alpha = false ; app_tls_skip_verify_insecure = false # Enter a comma-separated list of plugin identifiers to identify plugins that are allowed to be loaded even if they lack a valid signature. allow_loading_unsigned_plugins = redis-explorer Restart Grafana and verify that plugin is registered tail -100 /var/log/grafana/grafana.log","title":"Start Grafana"},{"location":"development/redis-explorer/#enable-redis-explorer-plug-in","text":"Redis Explorer plug-in is disabled by default. To enable: Go to Configuration -> Plugins and choose Redis Explorer plug-in. Click Enable to add side menu, Data Sources and import Dashboards.","title":"Enable Redis Explorer plug-in"},{"location":"development/redis-explorer/#contact-us","text":"If you have questions, enhancement ideas or running into issues, please open an issue .","title":"Contact Us"},{"location":"redis-app/dashboards/","text":"Dashboards \u00b6 Redis Application plug-in includes three dashboards: CLI (Command line interface) Redis Overview RedisGears Application Icon All dashboards are accessible from the Application's icon in the left side menu. CLI (Command line interface) \u00b6 Streaming All panels are running in Streaming mode. Panels \u00b6 Operations per second (Streaming) Connected clients CLI panel Number of Keys, Expired and Evicted Keys Network (Inbound, Outbound) Memory (Used Memory, Used Memory Peak, LUA, Memory Limit, and Total System memory) Uptime and Version Eviction Policy Redis Overview \u00b6 Refresh Overview dashboard refreshes every 10 seconds. Panels \u00b6 Operations per second Connected clients Number of Keys, Expired and Evicted Keys Network (Inbound, Outbound) Memory (Used Memory, Used Memory Peak and LUA, Memory Limit and Total System memory) Uptime and Version Eviction Policy Client connections Command statistics Slow queries log Redis cluster health and nodes RedisGears \u00b6 RedisGears is a serverless engine for transaction, batch and event-driven data processing in Redis. Learn more at RedisGears project page . Panels \u00b6 RedisGears Memory Usage Registrations RedisGears script editor","title":"Dashboards"},{"location":"redis-app/dashboards/#dashboards","text":"Redis Application plug-in includes three dashboards: CLI (Command line interface) Redis Overview RedisGears Application Icon All dashboards are accessible from the Application's icon in the left side menu.","title":"Dashboards"},{"location":"redis-app/dashboards/#cli-command-line-interface","text":"Streaming All panels are running in Streaming mode.","title":"CLI (Command line interface)"},{"location":"redis-app/dashboards/#panels","text":"Operations per second (Streaming) Connected clients CLI panel Number of Keys, Expired and Evicted Keys Network (Inbound, Outbound) Memory (Used Memory, Used Memory Peak, LUA, Memory Limit, and Total System memory) Uptime and Version Eviction Policy","title":"Panels"},{"location":"redis-app/dashboards/#redis-overview","text":"Refresh Overview dashboard refreshes every 10 seconds.","title":"Redis Overview"},{"location":"redis-app/dashboards/#panels_1","text":"Operations per second Connected clients Number of Keys, Expired and Evicted Keys Network (Inbound, Outbound) Memory (Used Memory, Used Memory Peak and LUA, Memory Limit and Total System memory) Uptime and Version Eviction Policy Client connections Command statistics Slow queries log Redis cluster health and nodes","title":"Panels"},{"location":"redis-app/dashboards/#redisgears","text":"RedisGears is a serverless engine for transaction, batch and event-driven data processing in Redis. Learn more at RedisGears project page .","title":"RedisGears"},{"location":"redis-app/dashboards/#panels_2","text":"RedisGears Memory Usage Registrations RedisGears script editor","title":"Panels"},{"location":"redis-app/datasources/","text":"Manage Redis Data Sources \u00b6 Redis Application plug-in helps to manage Redis Data Sources and open CLI and RedisGears dashboards from a single page. Home page connects to every configured data source and check available Redis Modules using command command. Loading Time Page load can take a long time if data source are located far away from Grafana or Redis Data Source can't connect to the database. Add Redis Data Source \u00b6 To add Redis Data Source click on Add Redis Data Source and configure data source following Configuration page.","title":"Data Sources"},{"location":"redis-app/datasources/#manage-redis-data-sources","text":"Redis Application plug-in helps to manage Redis Data Sources and open CLI and RedisGears dashboards from a single page. Home page connects to every configured data source and check available Redis Modules using command command. Loading Time Page load can take a long time if data source are located far away from Grafana or Redis Data Source can't connect to the database.","title":"Manage Redis Data Sources"},{"location":"redis-app/datasources/#add-redis-data-source","text":"To add Redis Data Source click on Add Redis Data Source and configure data source following Configuration page.","title":"Add Redis Data Source"},{"location":"redis-app/panels/","text":"Custom panels \u00b6 Redis Application plug-in provides four custom panels for Redis Data Source: Command line interface (CLI) Command Latency (Graph and Table) Keys consuming a lot of memory RedisGears Script Editor","title":"Custom Panels"},{"location":"redis-app/panels/#custom-panels","text":"Redis Application plug-in provides four custom panels for Redis Data Source: Command line interface (CLI) Command Latency (Graph and Table) Keys consuming a lot of memory RedisGears Script Editor","title":"Custom panels"},{"location":"redis-app/redis-cli-panel/","text":"Command line interface (CLI) \u00b6 This panel provides Redis command line interface that allows to send commands to Redis, and read the replies sent by the server, directly from the Grafana. Help \u00b6 When typing any Redis command or module name, brief description will appear on the panel. To learn more and see detailed description, click on the link in the bottom right corner of the help. Dashboard \u00b6 This panel is included in Redis CLI dashboard .","title":"Command line interface (CLI)"},{"location":"redis-app/redis-cli-panel/#command-line-interface-cli","text":"This panel provides Redis command line interface that allows to send commands to Redis, and read the replies sent by the server, directly from the Grafana.","title":"Command line interface (CLI)"},{"location":"redis-app/redis-cli-panel/#help","text":"When typing any Redis command or module name, brief description will appear on the panel. To learn more and see detailed description, click on the link in the bottom right corner of the help.","title":"Help"},{"location":"redis-app/redis-cli-panel/#dashboard","text":"This panel is included in Redis CLI dashboard .","title":"Dashboard"},{"location":"redis-app/redis-gears-panel/","text":"RedisGears Script Editor \u00b6 RedisGears is a dynamic framework that enables developers to write and execute functions that implement data flows in Redis, while abstracting away the data\u2019s distribution and deployment. Execute \u00b6 This panel support Python syntax and allows to execute functions in blocking and unblocking modes. Dashboard \u00b6 This panel is included in Redis Gears dashboard .","title":"RedisGears"},{"location":"redis-app/redis-gears-panel/#redisgears-script-editor","text":"RedisGears is a dynamic framework that enables developers to write and execute functions that implement data flows in Redis, while abstracting away the data\u2019s distribution and deployment.","title":"RedisGears Script Editor"},{"location":"redis-app/redis-gears-panel/#execute","text":"This panel support Python syntax and allows to execute functions in blocking and unblocking modes.","title":"Execute"},{"location":"redis-app/redis-gears-panel/#dashboard","text":"This panel is included in Redis Gears dashboard .","title":"Dashboard"},{"location":"redis-app/redis-keys-panel/","text":"Keys consuming a lot of memory \u00b6 Do you want to know which keys consume a lot of memory in your Redis database? This panel is based on TMSCAN to scan keys and sort results based on memory usage in the table format. Latency Please use this command in OFF-PEAK as it cause latency increase. Options \u00b6 Interval and count for SCAN command is configurable to keep latency under control. Dashboard \u00b6 This panel is included in Redis CLI dashboard .","title":"Keys consuming a lot of memory"},{"location":"redis-app/redis-keys-panel/#keys-consuming-a-lot-of-memory","text":"Do you want to know which keys consume a lot of memory in your Redis database? This panel is based on TMSCAN to scan keys and sort results based on memory usage in the table format. Latency Please use this command in OFF-PEAK as it cause latency increase.","title":"Keys consuming a lot of memory"},{"location":"redis-app/redis-keys-panel/#options","text":"Interval and count for SCAN command is configurable to keep latency under control.","title":"Options"},{"location":"redis-app/redis-keys-panel/#dashboard","text":"This panel is included in Redis CLI dashboard .","title":"Dashboard"},{"location":"redis-app/redis-latency-panel/","text":"Command Latency \u00b6 Redis is often used in the context of demanding use cases, where it serves a large number of queries per second per instance, and at the same time, there are very strict latency requirements both for the average response time and for the worst case latency. This panel provides commands's latency based on INFO COMMANDSTATS . Information is provide in Graph and table views. Graph view \u00b6 Table view \u00b6 Dashboard \u00b6 This panel is included in Redis CLI dashboard .","title":"Command Latency"},{"location":"redis-app/redis-latency-panel/#command-latency","text":"Redis is often used in the context of demanding use cases, where it serves a large number of queries per second per instance, and at the same time, there are very strict latency requirements both for the average response time and for the worst case latency. This panel provides commands's latency based on INFO COMMANDSTATS . Information is provide in Graph and table views.","title":"Command Latency"},{"location":"redis-app/redis-latency-panel/#graph-view","text":"","title":"Graph view"},{"location":"redis-app/redis-latency-panel/#table-view","text":"","title":"Table view"},{"location":"redis-app/redis-latency-panel/#dashboard","text":"This panel is included in Redis CLI dashboard .","title":"Dashboard"},{"location":"redis-datasource/commands/","text":"Redis Data Source supports \u00b6 Redis Data Source supports core Redis, custom and Redis Modules commands: RedisTimeSeries - Time Series data structure RedisGears - Dynamic framework for data processing RedisGraph - Graph database RediSearch - Secondary Index & Query Engine Query Editor \u00b6 Choose Type , Command , enable Streaming if required and provide all required parameters: Core (Hashes, Sets, Lists, Strings, Streams, etc.) \u00b6 CLIENT LIST - Returns information and statistics about the client connections server CLUSTER INFO - Provides INFO style information about Redis Cluster vital parameters CLUSTER NODES - Provides current cluster configuration, given by the set of known nodes GET - Returns the value of key HGET - Returns the value associated with field in the hash stored at key HGETALL - Returns all fields and values of the hash stored at key HKEYS - Returns all field names in the hash stored at key HLEN - Returns the number of fields contained in the hash stored at key HMGET - Returns the values associated with the specified fields in the hash stored at key INFO - Returns information and statistics about the server LLEN - Returns the length of the list stored at key SCARD - Returns the set cardinality (number of elements) of the set stored at key SLOWLOG GET - Returns the Redis slow queries log SMEMBERS - Returns all the members of the set value stored at key TTL - Returns the string representation of the type of the value stored at key TYPE - Returns the string representation of the type of the value stored at key XINFO STREAM - Returns general information about the stream stored at the specified key XLEN - Returns the number of entries inside a stream XRANGE - Returns the stream entries matching a given range of IDs XREVRANGE - Returns the stream entries matching a given range of IDs in reverse order Custom \u00b6 TMSCAN - Returns keys with types and memory usage RedisTimeSeries \u00b6 TS.GET - Returns the last sample TS.INFO - Returns information and statistics on the time-series TS.MRANGE - Query a timestamp range across multiple time-series by filters TS.QUERYINDEX - Query all the keys matching the filter list TS.RANGE - Query a range RedisGears \u00b6 RG.DUMPREGISTRATIONS - Outputs the list of function registrations RG.PYSTATS - Returns memory usage statistics from the Python interpreter RedisGraph \u00b6 GRAPH.QUERY - Executes the given query against a specified graph GRAPH.SLOWLOG - Returns a list containing up to 10 of the slowest queries issued against the given graph ID RediSearch \u00b6 FT.INFO - Returns information and statistics on the index","title":"Supported commands"},{"location":"redis-datasource/commands/#redis-data-source-supports","text":"Redis Data Source supports core Redis, custom and Redis Modules commands: RedisTimeSeries - Time Series data structure RedisGears - Dynamic framework for data processing RedisGraph - Graph database RediSearch - Secondary Index & Query Engine","title":"Redis Data Source supports"},{"location":"redis-datasource/commands/#query-editor","text":"Choose Type , Command , enable Streaming if required and provide all required parameters:","title":"Query Editor"},{"location":"redis-datasource/commands/#core-hashes-sets-lists-strings-streams-etc","text":"CLIENT LIST - Returns information and statistics about the client connections server CLUSTER INFO - Provides INFO style information about Redis Cluster vital parameters CLUSTER NODES - Provides current cluster configuration, given by the set of known nodes GET - Returns the value of key HGET - Returns the value associated with field in the hash stored at key HGETALL - Returns all fields and values of the hash stored at key HKEYS - Returns all field names in the hash stored at key HLEN - Returns the number of fields contained in the hash stored at key HMGET - Returns the values associated with the specified fields in the hash stored at key INFO - Returns information and statistics about the server LLEN - Returns the length of the list stored at key SCARD - Returns the set cardinality (number of elements) of the set stored at key SLOWLOG GET - Returns the Redis slow queries log SMEMBERS - Returns all the members of the set value stored at key TTL - Returns the string representation of the type of the value stored at key TYPE - Returns the string representation of the type of the value stored at key XINFO STREAM - Returns general information about the stream stored at the specified key XLEN - Returns the number of entries inside a stream XRANGE - Returns the stream entries matching a given range of IDs XREVRANGE - Returns the stream entries matching a given range of IDs in reverse order","title":"Core (Hashes, Sets, Lists, Strings, Streams, etc.)"},{"location":"redis-datasource/commands/#custom","text":"TMSCAN - Returns keys with types and memory usage","title":"Custom"},{"location":"redis-datasource/commands/#redistimeseries","text":"TS.GET - Returns the last sample TS.INFO - Returns information and statistics on the time-series TS.MRANGE - Query a timestamp range across multiple time-series by filters TS.QUERYINDEX - Query all the keys matching the filter list TS.RANGE - Query a range","title":"RedisTimeSeries"},{"location":"redis-datasource/commands/#redisgears","text":"RG.DUMPREGISTRATIONS - Outputs the list of function registrations RG.PYSTATS - Returns memory usage statistics from the Python interpreter","title":"RedisGears"},{"location":"redis-datasource/commands/#redisgraph","text":"GRAPH.QUERY - Executes the given query against a specified graph GRAPH.SLOWLOG - Returns a list containing up to 10 of the slowest queries issued against the given graph ID","title":"RedisGraph"},{"location":"redis-datasource/commands/#redisearch","text":"FT.INFO - Returns information and statistics on the index","title":"RediSearch"},{"location":"redis-datasource/configuration/","text":"Redis Data Source configuration \u00b6 Data Source can connect to any Redis database On-Premises or in the Cloud. You can add as many data sources as you want to support multiple Redis databases. Redis accepts clients connections on the configured listening TCP port and the Unix socket if enabled. Cluster is a distributed implementation of OSS Redis and Sentinel provides high availability. Main configuration \u00b6 Address \u00b6 Specify host:port address or a URI. Please use /db-number or ?db=db-number to specify the database number as defined in the Schema : redis://redis-server:6379/0 Cluster \u00b6 In Cluster mode Address can contain multiple values ( host:port address or a URI) with comma. Sentinel \u00b6 In Sentinel mode Address can contain multiple values ( host:port address or a URI) with comma. Also, provide Master Name to connect to. Unix socket \u00b6 In Unix socket mode Address should contain path to the socket file. ACL \u00b6 Available since Redis 6.0 and allows to specify Username to authenticate. Password \u00b6 Security Passwords are kept in the Grafana security database and not accessible to users. When specified AUTH command will be used to authenticate with the provided password. Pool Size \u00b6 Data source will keep open at least the given number of connections to the redis instance at the given address. The recommended size of the pool is 5 and can be increased if dashboards have a lot of panels and multiple users. Advanced configuration \u00b6 Timeout \u00b6 Sets the duration in seconds for connect, read and write timeouts. Default value is 10 seconds. Ping Interval \u00b6 Specifies the interval in seconds at which a ping event happens. A shorter interval means connections are pinged more frequently, but also means more traffic with the server. If interval is zero then ping will be disabled. Default value is 0. Pipeline Window \u00b6 Sets the duration in microseconds after which internal pipelines will be flushed. If window is zero then implicit pipelining will be disabled. Default value is 0. SSL/TLS \u00b6 To enabled SSL/TLS authenticate enable it and provide all required parameters. Skip Verify \u00b6 If checked, the server's certificate will not be checked for validity. Should be enabled for Self-Signed certificates. Client Certificate and Key \u00b6 Security Client certificates and keys are kept in the Grafana security database and not accessible to users. Client Certificate and Key should be provided when client authentication is enforced. Certification Authority \u00b6 Provide certificate to validate server's certificate or enable Skip Verify . Known issues \u00b6 Plugin health check failed \u00b6 Redis Data Source binaries should have executable permissions for Grafana to be able to execute it. Check out Quickstart page for more information. Redis_datasource_darwin_amd64 cannot be opened because the developer cannot be verified \u00b6 Go to System Preferences > Security & Privacy and set to allow redis-datasource_darwin_amd64 .","title":"Configuration"},{"location":"redis-datasource/configuration/#redis-data-source-configuration","text":"Data Source can connect to any Redis database On-Premises or in the Cloud. You can add as many data sources as you want to support multiple Redis databases. Redis accepts clients connections on the configured listening TCP port and the Unix socket if enabled. Cluster is a distributed implementation of OSS Redis and Sentinel provides high availability.","title":"Redis Data Source configuration"},{"location":"redis-datasource/configuration/#main-configuration","text":"","title":"Main configuration"},{"location":"redis-datasource/configuration/#address","text":"Specify host:port address or a URI. Please use /db-number or ?db=db-number to specify the database number as defined in the Schema : redis://redis-server:6379/0","title":"Address"},{"location":"redis-datasource/configuration/#cluster","text":"In Cluster mode Address can contain multiple values ( host:port address or a URI) with comma.","title":"Cluster"},{"location":"redis-datasource/configuration/#sentinel","text":"In Sentinel mode Address can contain multiple values ( host:port address or a URI) with comma. Also, provide Master Name to connect to.","title":"Sentinel"},{"location":"redis-datasource/configuration/#unix-socket","text":"In Unix socket mode Address should contain path to the socket file.","title":"Unix socket"},{"location":"redis-datasource/configuration/#acl","text":"Available since Redis 6.0 and allows to specify Username to authenticate.","title":"ACL"},{"location":"redis-datasource/configuration/#password","text":"Security Passwords are kept in the Grafana security database and not accessible to users. When specified AUTH command will be used to authenticate with the provided password.","title":"Password"},{"location":"redis-datasource/configuration/#pool-size","text":"Data source will keep open at least the given number of connections to the redis instance at the given address. The recommended size of the pool is 5 and can be increased if dashboards have a lot of panels and multiple users.","title":"Pool Size"},{"location":"redis-datasource/configuration/#advanced-configuration","text":"","title":"Advanced configuration"},{"location":"redis-datasource/configuration/#timeout","text":"Sets the duration in seconds for connect, read and write timeouts. Default value is 10 seconds.","title":"Timeout"},{"location":"redis-datasource/configuration/#ping-interval","text":"Specifies the interval in seconds at which a ping event happens. A shorter interval means connections are pinged more frequently, but also means more traffic with the server. If interval is zero then ping will be disabled. Default value is 0.","title":"Ping Interval"},{"location":"redis-datasource/configuration/#pipeline-window","text":"Sets the duration in microseconds after which internal pipelines will be flushed. If window is zero then implicit pipelining will be disabled. Default value is 0.","title":"Pipeline Window"},{"location":"redis-datasource/configuration/#ssltls","text":"To enabled SSL/TLS authenticate enable it and provide all required parameters.","title":"SSL/TLS"},{"location":"redis-datasource/configuration/#skip-verify","text":"If checked, the server's certificate will not be checked for validity. Should be enabled for Self-Signed certificates.","title":"Skip Verify"},{"location":"redis-datasource/configuration/#client-certificate-and-key","text":"Security Client certificates and keys are kept in the Grafana security database and not accessible to users. Client Certificate and Key should be provided when client authentication is enforced.","title":"Client Certificate and Key"},{"location":"redis-datasource/configuration/#certification-authority","text":"Provide certificate to validate server's certificate or enable Skip Verify .","title":"Certification Authority"},{"location":"redis-datasource/configuration/#known-issues","text":"","title":"Known issues"},{"location":"redis-datasource/configuration/#plugin-health-check-failed","text":"Redis Data Source binaries should have executable permissions for Grafana to be able to execute it. Check out Quickstart page for more information.","title":"Plugin health check failed"},{"location":"redis-datasource/configuration/#redis_datasource_darwin_amd64-cannot-be-opened-because-the-developer-cannot-be-verified","text":"Go to System Preferences > Security & Privacy and set to allow redis-datasource_darwin_amd64 .","title":"Redis_datasource_darwin_amd64 cannot be opened because the developer cannot be verified"},{"location":"redis-datasource/streaming/","text":"Redis Data Source supports Streaming \u00b6 Work in Progress","title":"Streaming"},{"location":"redis-datasource/streaming/#redis-data-source-supports-streaming","text":"Work in Progress","title":"Redis Data Source supports Streaming"},{"location":"redis-datasource/variables/","text":"Variables \u00b6 Template variables can query command and use other variables as parameters: How to use SUNION for multi-select variable? \u00b6 LUA The LUA script should work fine on a single shard deployment: eval \"return redis.call('sunion', ${ region : singlequote } )\" 0 Redis Gears Another option is to utilize RedisGears module: gb = GB ( 'CommandReader' ) gb . flatmap ( lambda x : execute ( 'SUNION' , * x [ 1 ] . split ( \",\" ))) gb . register ( trigger = 'SUNION' ) To execute the trigger in Grafana: RG.TRIGGER SUNION ${ region : csv }","title":"Variables"},{"location":"redis-datasource/variables/#variables","text":"Template variables can query command and use other variables as parameters:","title":"Variables"},{"location":"redis-datasource/variables/#how-to-use-sunion-for-multi-select-variable","text":"LUA The LUA script should work fine on a single shard deployment: eval \"return redis.call('sunion', ${ region : singlequote } )\" 0 Redis Gears Another option is to utilize RedisGears module: gb = GB ( 'CommandReader' ) gb . flatmap ( lambda x : execute ( 'SUNION' , * x [ 1 ] . split ( \",\" ))) gb . register ( trigger = 'SUNION' ) To execute the trigger in Grafana: RG.TRIGGER SUNION ${ region : csv }","title":"How to use SUNION for multi-select variable?"},{"location":"redis-datasource/custom/TMSCAN/","text":"TMSCAN \u00b6 Returns keys with types and memory usage. Latency Please use this command in OFF-PEAK as it cause latency increase. Custom Command This command was introduced for Redis Latency panel and is not a part of Redis server. This custom command is based on SCAN and MEMORY USAGE commands.","title":"TMSCAN"},{"location":"redis-datasource/custom/TMSCAN/#tmscan","text":"Returns keys with types and memory usage. Latency Please use this command in OFF-PEAK as it cause latency increase. Custom Command This command was introduced for Redis Latency panel and is not a part of Redis server. This custom command is based on SCAN and MEMORY USAGE commands.","title":"TMSCAN"},{"location":"redis-datasource/redis/INFO/","text":"INFO \u00b6 Returns information and statistics about the server. Core https://redis.io/commands/INFO","title":"INFO"},{"location":"redis-datasource/redis/INFO/#info","text":"Returns information and statistics about the server. Core https://redis.io/commands/INFO","title":"INFO"},{"location":"redis-datasource/redis-timeseries/TS-RANGE/","text":"TS.RANGE \u00b6 Query a range in forward direction. RedisTimeSeries https://oss.redislabs.com/redistimeseries/commands/#tsrangetsrevrange Reverse direction \u00b6 Reverse direction is not required as can be adjusted on Grafana panel.","title":"TS.RANGE"},{"location":"redis-datasource/redis-timeseries/TS-RANGE/#tsrange","text":"Query a range in forward direction. RedisTimeSeries https://oss.redislabs.com/redistimeseries/commands/#tsrangetsrevrange","title":"TS.RANGE"},{"location":"redis-datasource/redis-timeseries/TS-RANGE/#reverse-direction","text":"Reverse direction is not required as can be adjusted on Grafana panel.","title":"Reverse direction"}]}