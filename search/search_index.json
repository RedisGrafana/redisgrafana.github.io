{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Redis plug-ins for Grafana \u00b6 The Redis plug-ins for Grafana allow users to connect to the Redis databases and build dashboards in Grafana to easily monitor Redis and application data. Data Source can connect to any Redis database On-Premises or in the Cloud. Plug-ins are registered in the Grafana repository and available to Grafana , Grafana Enterprise and Grafana Cloud . Where Next? \u00b6 The Quickstart is the recommended starting point The Configuration page explains how to configure Redis Data Source The Commands reference all supported commands in Redis Data Source The Custom Panels page provides information about all custom panels included in Redis Application plug-in Quick Links \u00b6 Redis Data Source for Grafana Redis Application plug-in Learn More \u00b6 Introducing the Redis Data Source Plug-in for Grafana How to Use the New Redis Data Source for Grafana Plug-in 3 Real-Life Apps Built with Redis Data Source for Grafana Real-time observability with Redis and Grafana Contact Us \u00b6 If you have questions or feedback, or want to report an issue, here's where you can get in touch: Redis Data Source Redis Application plug-in Redis Explorer plug-in Documentation updates License \u00b6 Redis plug-ins for Grafana are licensed under the Apache License Version 2.0 .","title":"Home"},{"location":"index.html#redis-plug-ins-for-grafana","text":"The Redis plug-ins for Grafana allow users to connect to the Redis databases and build dashboards in Grafana to easily monitor Redis and application data. Data Source can connect to any Redis database On-Premises or in the Cloud. Plug-ins are registered in the Grafana repository and available to Grafana , Grafana Enterprise and Grafana Cloud .","title":" Redis plug-ins for Grafana"},{"location":"index.html#where-next","text":"The Quickstart is the recommended starting point The Configuration page explains how to configure Redis Data Source The Commands reference all supported commands in Redis Data Source The Custom Panels page provides information about all custom panels included in Redis Application plug-in","title":"Where Next?"},{"location":"index.html#quick-links","text":"Redis Data Source for Grafana Redis Application plug-in","title":"Quick Links"},{"location":"index.html#learn-more","text":"Introducing the Redis Data Source Plug-in for Grafana How to Use the New Redis Data Source for Grafana Plug-in 3 Real-Life Apps Built with Redis Data Source for Grafana Real-time observability with Redis and Grafana","title":"Learn More"},{"location":"index.html#contact-us","text":"If you have questions or feedback, or want to report an issue, here's where you can get in touch: Redis Data Source Redis Application plug-in Redis Explorer plug-in Documentation updates","title":"Contact Us"},{"location":"index.html#license","text":"Redis plug-ins for Grafana are licensed under the Apache License Version 2.0 .","title":"License"},{"location":"examples.html","text":"Examples \u00b6 The following sections consist of various sample projects and examples showing the uses for Redis plug-ins for Grafana. To contribute your project, click the \"Edit this page\" button at the top to submit a Pull Request. How many times Redis Data Source for Grafana was downloaded? \u00b6 Earlier this month, Redis Labs released the new Redis Data Source for Grafana plug-in, which connects the widely used open source application monitoring tool to Redis. To give you an idea of how it all works, let\u2019s take a look at a self-referential example: using the plug-in to see how many times it has been downloaded over time. (The Grafana plug-in repository itself does not provide such statistics out of the box.). Read more at Redis Labs blog . This project collect plug-ins statistics from Grafana repository using RedisTimeSeries : GitHub repository: https://github.com/RedisGrafana/grafana-plugin-stats . Pop-up store demo using RedisTimeSeries, RedisGears and Redis Data Source \u00b6 I am a big fan of Redis Streams, a new data type introduced in Redis 5.0, and I was looking for a fast and simple solution to monitor queues for data processing. While working on the Redis Data Source, our team started to explore RedisGears\u2014a dynamic framework that lets developers write and execute functions that implement data flows in Redis while abstracting away the data\u2019s distribution and deployment\u2014for another project and we decided to use them together for this data-pipeline demo for a pop-up store. Read more at Redis Labs blog . The Pop-up store demo is using Redis Streams , RedisTimeSeries , RedisGears and Redis Data Source to visualize real-time data pipeline in Grafana. GitHub repository: https://github.com/RedisTimeSeries/redis-pop-up-store .","title":"Examples"},{"location":"examples.html#examples","text":"The following sections consist of various sample projects and examples showing the uses for Redis plug-ins for Grafana. To contribute your project, click the \"Edit this page\" button at the top to submit a Pull Request.","title":"Examples"},{"location":"examples.html#how-many-times-redis-data-source-for-grafana-was-downloaded","text":"Earlier this month, Redis Labs released the new Redis Data Source for Grafana plug-in, which connects the widely used open source application monitoring tool to Redis. To give you an idea of how it all works, let\u2019s take a look at a self-referential example: using the plug-in to see how many times it has been downloaded over time. (The Grafana plug-in repository itself does not provide such statistics out of the box.). Read more at Redis Labs blog . This project collect plug-ins statistics from Grafana repository using RedisTimeSeries : GitHub repository: https://github.com/RedisGrafana/grafana-plugin-stats .","title":"How many times Redis Data Source for Grafana was downloaded?"},{"location":"examples.html#pop-up-store-demo-using-redistimeseries-redisgears-and-redis-data-source","text":"I am a big fan of Redis Streams, a new data type introduced in Redis 5.0, and I was looking for a fast and simple solution to monitor queues for data processing. While working on the Redis Data Source, our team started to explore RedisGears\u2014a dynamic framework that lets developers write and execute functions that implement data flows in Redis while abstracting away the data\u2019s distribution and deployment\u2014for another project and we decided to use them together for this data-pipeline demo for a pop-up store. Read more at Redis Labs blog . The Pop-up store demo is using Redis Streams , RedisTimeSeries , RedisGears and Redis Data Source to visualize real-time data pipeline in Grafana. GitHub repository: https://github.com/RedisTimeSeries/redis-pop-up-store .","title":"Pop-up store demo using RedisTimeSeries, RedisGears and Redis Data Source"},{"location":"quickstart.html","text":"Quickstart \u00b6 Only Grafana 7.1 and later with a new plug-in platform supported. Install using grafana-cli \u00b6 Use the grafana-cli tool to install from the commandline. Redis Application plug-in and Redis Data Source \u00b6 grafana-cli plugins install redis-app Redis Data Source \u00b6 grafana-cli plugins install redis-datasource Run using Docker \u00b6 Redis Application plug-in and Redis Data Source \u00b6 docker run -d -p 3000 :3000 --name = grafana -e \"GF_INSTALL_PLUGINS=redis-app\" grafana/grafana Redis Data Source \u00b6 docker run -d -p 3000 :3000 --name = grafana -e \"GF_INSTALL_PLUGINS=redis-datasource\" grafana/grafana Enable Redis Application plug-in \u00b6 Redis Application plug-in is disabled by default. Go to Configuration -> Plugins and enable Redis Application plug-in. Configure Redis Data Source \u00b6 The Configuration page explains how to configure Redis Data Source. Open Grafana in your browser and configure Redis Data Source. You can add as many data sources as you want to support multiple Redis databases.","title":"Quickstart"},{"location":"quickstart.html#quickstart","text":"Only Grafana 7.1 and later with a new plug-in platform supported.","title":"Quickstart"},{"location":"quickstart.html#install-using-grafana-cli","text":"Use the grafana-cli tool to install from the commandline.","title":"Install using grafana-cli"},{"location":"quickstart.html#redis-application-plug-in-and-redis-data-source","text":"grafana-cli plugins install redis-app","title":"Redis Application plug-in and Redis Data Source"},{"location":"quickstart.html#redis-data-source","text":"grafana-cli plugins install redis-datasource","title":"Redis Data Source"},{"location":"quickstart.html#run-using-docker","text":"","title":"Run using Docker"},{"location":"quickstart.html#redis-application-plug-in-and-redis-data-source_1","text":"docker run -d -p 3000 :3000 --name = grafana -e \"GF_INSTALL_PLUGINS=redis-app\" grafana/grafana","title":"Redis Application plug-in and Redis Data Source"},{"location":"quickstart.html#redis-data-source_1","text":"docker run -d -p 3000 :3000 --name = grafana -e \"GF_INSTALL_PLUGINS=redis-datasource\" grafana/grafana","title":"Redis Data Source"},{"location":"quickstart.html#enable-redis-application-plug-in","text":"Redis Application plug-in is disabled by default. Go to Configuration -> Plugins and enable Redis Application plug-in.","title":"Enable Redis Application plug-in"},{"location":"quickstart.html#configure-redis-data-source","text":"The Configuration page explains how to configure Redis Data Source. Open Grafana in your browser and configure Redis Data Source. You can add as many data sources as you want to support multiple Redis databases.","title":"Configure Redis Data Source"},{"location":"development/images.html","text":"Docker Images \u00b6 To try the latest features you can start nightly build Docker image. Supported platforms are: linux/amd64 linux/arm64 linux/arm Images built from main branch and can be UNSTABLE. Redis Application plug-in \u00b6 The Redis Application, is a plug-in for Grafana that provides application pages and custom panels for Redis Data Source. docker run -d -p 3000 :3000 --name = redis-app ghcr.io/redisgrafana/redis-app:latest Redis Explorer plug-in \u00b6 The Redis Explorer, is a plug-in for Grafana that allows users to connect to Redis Enterprise software clusters using REST API and build dashboards to observe their status. docker run -d -p 3000 :3000 --name = explorer ghcr.io/redisgrafana/redis-explorer:latest","title":"Docker images"},{"location":"development/images.html#docker-images","text":"To try the latest features you can start nightly build Docker image. Supported platforms are: linux/amd64 linux/arm64 linux/arm Images built from main branch and can be UNSTABLE.","title":"Docker Images"},{"location":"development/images.html#redis-application-plug-in","text":"The Redis Application, is a plug-in for Grafana that provides application pages and custom panels for Redis Data Source. docker run -d -p 3000 :3000 --name = redis-app ghcr.io/redisgrafana/redis-app:latest","title":"Redis Application plug-in"},{"location":"development/images.html#redis-explorer-plug-in","text":"The Redis Explorer, is a plug-in for Grafana that allows users to connect to Redis Enterprise software clusters using REST API and build dashboards to observe their status. docker run -d -p 3000 :3000 --name = explorer ghcr.io/redisgrafana/redis-explorer:latest","title":"Redis Explorer plug-in"},{"location":"development/redis-app.html","text":"Developing Redis Application plug-in for Grafana \u00b6 Developing Application plug-in involves setting up the development environment (which can be either Linux-based or macOS-based), building and running tests. Install Grafana \u00b6 Grafana can be used in Docker or installed locally. Follow Installation instructions to install and start Grafana Open Grafana UI in web-browser http://X.X.X.X:3000 Clone repository \u00b6 git clone https://github.com/RedisGrafana/grafana-redis-app.git Build Application \u00b6 Install the latest version of Node.js using Node Version Manager or download binaries Install yarn globally npm install yarn -g Install dependencies yarn install Build frontend components yarn build Update local Grafana Configuration \u00b6 Move distribution to Grafana's plugins/ folder mv dist/ /var/lib/grafana/plugins/redis-app Add redis-app to allowed unsigned plugins vi /etc/grafana/grafana.ini [plugins] ;enable_alpha = false ;app_tls_skip_verify_insecure = false # Enter a comma-separated list of plugin identifiers to identify plugins that are allowed to be loaded even if they lack a valid signature. allow_loading_unsigned_plugins = redis-app Verify that plugin is registered tail -100 /var/log/grafana/grafana.log Start using Docker Compose \u00b6 Docker Compose should be pre-installed following documentation . yarn start:dev Enable Redis Application plug-in \u00b6 Redis Application plug-in is disabled by default. Go to Configuration -> Plugins and enable Redis Application plug-in. Contact Us \u00b6 If you have questions, enhancement ideas or running into issues, please open an issue .","title":"Redis Application plug-in"},{"location":"development/redis-app.html#developing-redis-application-plug-in-for-grafana","text":"Developing Application plug-in involves setting up the development environment (which can be either Linux-based or macOS-based), building and running tests.","title":"Developing Redis Application plug-in for Grafana"},{"location":"development/redis-app.html#install-grafana","text":"Grafana can be used in Docker or installed locally. Follow Installation instructions to install and start Grafana Open Grafana UI in web-browser http://X.X.X.X:3000","title":"Install Grafana"},{"location":"development/redis-app.html#clone-repository","text":"git clone https://github.com/RedisGrafana/grafana-redis-app.git","title":"Clone repository"},{"location":"development/redis-app.html#build-application","text":"Install the latest version of Node.js using Node Version Manager or download binaries Install yarn globally npm install yarn -g Install dependencies yarn install Build frontend components yarn build","title":"Build Application"},{"location":"development/redis-app.html#update-local-grafana-configuration","text":"Move distribution to Grafana's plugins/ folder mv dist/ /var/lib/grafana/plugins/redis-app Add redis-app to allowed unsigned plugins vi /etc/grafana/grafana.ini [plugins] ;enable_alpha = false ;app_tls_skip_verify_insecure = false # Enter a comma-separated list of plugin identifiers to identify plugins that are allowed to be loaded even if they lack a valid signature. allow_loading_unsigned_plugins = redis-app Verify that plugin is registered tail -100 /var/log/grafana/grafana.log","title":"Update local Grafana Configuration"},{"location":"development/redis-app.html#start-using-docker-compose","text":"Docker Compose should be pre-installed following documentation . yarn start:dev","title":"Start using Docker Compose"},{"location":"development/redis-app.html#enable-redis-application-plug-in","text":"Redis Application plug-in is disabled by default. Go to Configuration -> Plugins and enable Redis Application plug-in.","title":"Enable Redis Application plug-in"},{"location":"development/redis-app.html#contact-us","text":"If you have questions, enhancement ideas or running into issues, please open an issue .","title":"Contact Us"},{"location":"development/redis-datasource.html","text":"Developing Redis Data Source for Grafana \u00b6 Developing Redis Data Source involves setting up the development environment (which can be either Linux-based or macOS-based), building and running tests. Install Grafana \u00b6 Grafana can be started in Docker or installed locally. Follow Installation instructions to install and start Grafana Open Grafana UI in web-browser http://X.X.X.X:3000 Clone repository \u00b6 git clone https://github.com/RedisGrafana/grafana-redis-datasource.git Build Data Source Frontend \u00b6 Install the latest version of Node.js using Node Version Manager or download binaries Install yarn globally npm install yarn -g Install dependencies yarn install Build frontend components yarn build Build Data Source Backend \u00b6 Install Golang for your platform yum install go Install Grafana plugin SDK for Go dependency go get -u github.com/grafana/grafana-plugin-sdk-go Install Mage (make-like build tool using Go) git clone https://github.com/magefile/mage cd mage go run bootstrap.go Build backend binaries for Linux, Windows and MacOS for supported platforms yarn build:backend Update local Grafana Configuration \u00b6 Move distribution to Grafana's plugins/ folder mv dist/ /var/lib/grafana/plugins/redis-datasource Add redis-datasource to allowed unsigned plugins vi /etc/grafana/grafana.ini [plugins] ;enable_alpha = false ;app_tls_skip_verify_insecure = false # Enter a comma-separated list of plugin identifiers to identify plugins that are allowed to be loaded even if they lack a valid signature. allow_loading_unsigned_plugins = redis-datasource Verify that plugin registered tail -100 /var/log/grafana/grafana.log t=2020-07-01T06:03:38+0000 lvl=info msg=\"Starting plugin search\" logger=plugins t=2020-07-01T06:03:38+0000 lvl=warn msg=\"Running an unsigned backend plugin\" logger=plugins pluginID=redis-datasource pluginDir=/var/lib/grafana/plugins/redis-datasource t=2020-07-01T06:03:38+0000 lvl=info msg=\"Registering plugin\" logger=plugins name=redis-datasource t=2020-07-01T06:03:38+0000 lvl=info msg=\"HTTP Server Listen\" logger=http.server address=[::]:3000 protocol=http subUrl= socket= Start using Docker Compose \u00b6 Docker Compose should be pre-installed following documentation . yarn start:dev Configure Redis Data Source \u00b6 The Configuration page explains how to configure Redis Data Source. Contact Us \u00b6 If you have questions, enhancement ideas or running into issues, please open an issue .","title":"Redis Data Source"},{"location":"development/redis-datasource.html#developing-redis-data-source-for-grafana","text":"Developing Redis Data Source involves setting up the development environment (which can be either Linux-based or macOS-based), building and running tests.","title":"Developing Redis Data Source for Grafana"},{"location":"development/redis-datasource.html#install-grafana","text":"Grafana can be started in Docker or installed locally. Follow Installation instructions to install and start Grafana Open Grafana UI in web-browser http://X.X.X.X:3000","title":"Install Grafana"},{"location":"development/redis-datasource.html#clone-repository","text":"git clone https://github.com/RedisGrafana/grafana-redis-datasource.git","title":"Clone repository"},{"location":"development/redis-datasource.html#build-data-source-frontend","text":"Install the latest version of Node.js using Node Version Manager or download binaries Install yarn globally npm install yarn -g Install dependencies yarn install Build frontend components yarn build","title":"Build Data Source Frontend"},{"location":"development/redis-datasource.html#build-data-source-backend","text":"Install Golang for your platform yum install go Install Grafana plugin SDK for Go dependency go get -u github.com/grafana/grafana-plugin-sdk-go Install Mage (make-like build tool using Go) git clone https://github.com/magefile/mage cd mage go run bootstrap.go Build backend binaries for Linux, Windows and MacOS for supported platforms yarn build:backend","title":"Build Data Source Backend"},{"location":"development/redis-datasource.html#update-local-grafana-configuration","text":"Move distribution to Grafana's plugins/ folder mv dist/ /var/lib/grafana/plugins/redis-datasource Add redis-datasource to allowed unsigned plugins vi /etc/grafana/grafana.ini [plugins] ;enable_alpha = false ;app_tls_skip_verify_insecure = false # Enter a comma-separated list of plugin identifiers to identify plugins that are allowed to be loaded even if they lack a valid signature. allow_loading_unsigned_plugins = redis-datasource Verify that plugin registered tail -100 /var/log/grafana/grafana.log t=2020-07-01T06:03:38+0000 lvl=info msg=\"Starting plugin search\" logger=plugins t=2020-07-01T06:03:38+0000 lvl=warn msg=\"Running an unsigned backend plugin\" logger=plugins pluginID=redis-datasource pluginDir=/var/lib/grafana/plugins/redis-datasource t=2020-07-01T06:03:38+0000 lvl=info msg=\"Registering plugin\" logger=plugins name=redis-datasource t=2020-07-01T06:03:38+0000 lvl=info msg=\"HTTP Server Listen\" logger=http.server address=[::]:3000 protocol=http subUrl= socket=","title":"Update local Grafana Configuration"},{"location":"development/redis-datasource.html#start-using-docker-compose","text":"Docker Compose should be pre-installed following documentation . yarn start:dev","title":"Start using Docker Compose"},{"location":"development/redis-datasource.html#configure-redis-data-source","text":"The Configuration page explains how to configure Redis Data Source.","title":"Configure Redis Data Source"},{"location":"development/redis-datasource.html#contact-us","text":"If you have questions, enhancement ideas or running into issues, please open an issue .","title":"Contact Us"},{"location":"development/redis-explorer.html","text":"Developing Redis Explorer plug-in for Grafana \u00b6 Developing Explorer plug-in involves setting up the development environment (which can be either Linux-based or macOS-based), building and running tests. Install Grafana \u00b6 Grafana can be used in Docker or installed locally. Follow Installation instructions to install and start Grafana Open Grafana UI in web-browser http://X.X.X.X:3000 Clone repository \u00b6 git clone https://github.com/RedisGrafana/grafana-redis-explorer.git Build Explorer \u00b6 Install the latest version of Node.js using Node Version Manager or download binaries Install yarn globally npm install yarn -g Install dependencies yarn install Build frontend components yarn build Update local Grafana Configuration \u00b6 Move distribution to Grafana's plugins/ folder mv dist/ /var/lib/grafana/plugins/redis-explorer Add redis-explorer to allowed unsigned plugins vi /etc/grafana/grafana.ini [plugins] ;enable_alpha = false ;app_tls_skip_verify_insecure = false # Enter a comma-separated list of plugin identifiers to identify plugins that are allowed to be loaded even if they lack a valid signature. allow_loading_unsigned_plugins = redis-explorer Verify that plugin is registered tail -100 /var/log/grafana/grafana.log Start using Docker Compose \u00b6 Docker Compose should be pre-installed following documentation . yarn start:dev Enable Redis Explorer plug-in \u00b6 Redis Explorer plug-in is disabled by default. Go to Configuration -> Plugins and enable Redis Explorer plug-in. Contact Us \u00b6 If you have questions, enhancement ideas or running into issues, please open an issue .","title":"Redis Explorer plug-in"},{"location":"development/redis-explorer.html#developing-redis-explorer-plug-in-for-grafana","text":"Developing Explorer plug-in involves setting up the development environment (which can be either Linux-based or macOS-based), building and running tests.","title":"Developing Redis Explorer plug-in for Grafana"},{"location":"development/redis-explorer.html#install-grafana","text":"Grafana can be used in Docker or installed locally. Follow Installation instructions to install and start Grafana Open Grafana UI in web-browser http://X.X.X.X:3000","title":"Install Grafana"},{"location":"development/redis-explorer.html#clone-repository","text":"git clone https://github.com/RedisGrafana/grafana-redis-explorer.git","title":"Clone repository"},{"location":"development/redis-explorer.html#build-explorer","text":"Install the latest version of Node.js using Node Version Manager or download binaries Install yarn globally npm install yarn -g Install dependencies yarn install Build frontend components yarn build","title":"Build Explorer"},{"location":"development/redis-explorer.html#update-local-grafana-configuration","text":"Move distribution to Grafana's plugins/ folder mv dist/ /var/lib/grafana/plugins/redis-explorer Add redis-explorer to allowed unsigned plugins vi /etc/grafana/grafana.ini [plugins] ;enable_alpha = false ;app_tls_skip_verify_insecure = false # Enter a comma-separated list of plugin identifiers to identify plugins that are allowed to be loaded even if they lack a valid signature. allow_loading_unsigned_plugins = redis-explorer Verify that plugin is registered tail -100 /var/log/grafana/grafana.log","title":"Update local Grafana Configuration"},{"location":"development/redis-explorer.html#start-using-docker-compose","text":"Docker Compose should be pre-installed following documentation . yarn start:dev","title":"Start using Docker Compose"},{"location":"development/redis-explorer.html#enable-redis-explorer-plug-in","text":"Redis Explorer plug-in is disabled by default. Go to Configuration -> Plugins and enable Redis Explorer plug-in.","title":"Enable Redis Explorer plug-in"},{"location":"development/redis-explorer.html#contact-us","text":"If you have questions, enhancement ideas or running into issues, please open an issue .","title":"Contact Us"},{"location":"redis-app/dashboards.html","text":"Dashboards \u00b6 Redis application plug-in includes three dashboards: Redis Overview CLI RedisGears All dashboard are available from Application's icon in the left side menu. CLI (Command line interface) \u00b6 Redis CLI dashboard combines Redis CLI panel with Streaming panels to observe Redis database in real-time.","title":"Dashboards"},{"location":"redis-app/dashboards.html#dashboards","text":"Redis application plug-in includes three dashboards: Redis Overview CLI RedisGears All dashboard are available from Application's icon in the left side menu.","title":"Dashboards"},{"location":"redis-app/dashboards.html#cli-command-line-interface","text":"Redis CLI dashboard combines Redis CLI panel with Streaming panels to observe Redis database in real-time.","title":"CLI (Command line interface)"},{"location":"redis-app/panels.html","text":"Custom panels \u00b6 Redis Application plug-in provides four custom panels for Redis Data Source: Command line interface (CLI) Command Latency (Graph and Table) Keys consuming a lot of memory Redis Gears","title":"Custom panels"},{"location":"redis-app/panels.html#custom-panels","text":"Redis Application plug-in provides four custom panels for Redis Data Source: Command line interface (CLI) Command Latency (Graph and Table) Keys consuming a lot of memory Redis Gears","title":"Custom panels"},{"location":"redis-app/redis-cli-panel.html","text":"Command line interface (CLI) \u00b6 This panel provides Redis command line interface that allows to send commands to Redis, and read the replies sent by the server, directly from the Grafana. This panel is a part of Redis CLI dashboard .","title":"Command line interface (CLI)"},{"location":"redis-app/redis-cli-panel.html#command-line-interface-cli","text":"This panel provides Redis command line interface that allows to send commands to Redis, and read the replies sent by the server, directly from the Grafana. This panel is a part of Redis CLI dashboard .","title":"Command line interface (CLI)"},{"location":"redis-app/redis-gears-panel.html","text":"Redis Gears \u00b6 RedisGears is a dynamic framework that enables developers to write and execute functions that implement data flows in Redis, while abstracting away the data\u2019s distribution and deployment. This panel is a part of Redis Gears dashboard . This panel support Python syntax and allows to execute functions in blocking and non-blocking mode.","title":"RedisGears"},{"location":"redis-app/redis-gears-panel.html#redis-gears","text":"RedisGears is a dynamic framework that enables developers to write and execute functions that implement data flows in Redis, while abstracting away the data\u2019s distribution and deployment. This panel is a part of Redis Gears dashboard . This panel support Python syntax and allows to execute functions in blocking and non-blocking mode.","title":"Redis Gears"},{"location":"redis-app/redis-keys-panel.html","text":"Keys consuming a lot of memory \u00b6 Do you want to know which keys consume a lot of memory in your Redis database? This panel is based on TMSCAN to scan keys and sort results based on memory usage in the table format. This panel is a part of Redis CLI dashboard . Please use this command in OFF-PEAK as it cause latency increase. Options \u00b6 Interval and count for SCAN command is configurable to keep latency under control.","title":"Keys consuming a lot of memory"},{"location":"redis-app/redis-keys-panel.html#keys-consuming-a-lot-of-memory","text":"Do you want to know which keys consume a lot of memory in your Redis database? This panel is based on TMSCAN to scan keys and sort results based on memory usage in the table format. This panel is a part of Redis CLI dashboard . Please use this command in OFF-PEAK as it cause latency increase.","title":"Keys consuming a lot of memory"},{"location":"redis-app/redis-keys-panel.html#options","text":"Interval and count for SCAN command is configurable to keep latency under control.","title":"Options"},{"location":"redis-app/redis-latency-panel.html","text":"Command Latency (Graph and Table) \u00b6 Redis is often used in the context of demanding use cases, where it serves a large number of queries per second per instance, and at the same time, there are very strict latency requirements both for the average response time and for the worst case latency. This panel is a part of Redis CLI dashboard . This panel provides commands's latency based on INFO COMMANDSTATS . Information is provide in Graph and table views. Graph view \u00b6 Table view \u00b6","title":"Command Latency"},{"location":"redis-app/redis-latency-panel.html#command-latency-graph-and-table","text":"Redis is often used in the context of demanding use cases, where it serves a large number of queries per second per instance, and at the same time, there are very strict latency requirements both for the average response time and for the worst case latency. This panel is a part of Redis CLI dashboard . This panel provides commands's latency based on INFO COMMANDSTATS . Information is provide in Graph and table views.","title":"Command Latency (Graph and Table)"},{"location":"redis-app/redis-latency-panel.html#graph-view","text":"","title":"Graph view"},{"location":"redis-app/redis-latency-panel.html#table-view","text":"","title":"Table view"},{"location":"redis-datasource/INFO.html","text":"INFO \u00b6 Returns information and statistics about the server. Specification: INFO .","title":"INFO"},{"location":"redis-datasource/INFO.html#info","text":"Returns information and statistics about the server. Specification: INFO .","title":"INFO"},{"location":"redis-datasource/TMSCAN.html","text":"TMSCAN \u00b6 Returns keys with types and memory usage. This command was created for Redis Latency panel . Please use this command in OFF-PEAK as it cause latency increase. This custom command is based on SCAN and MEMORY USAGE commands.","title":"TMSCAN"},{"location":"redis-datasource/TMSCAN.html#tmscan","text":"Returns keys with types and memory usage. This command was created for Redis Latency panel . Please use this command in OFF-PEAK as it cause latency increase. This custom command is based on SCAN and MEMORY USAGE commands.","title":"TMSCAN"},{"location":"redis-datasource/TS-RANGE.html","text":"TS.RANGE \u00b6 Query a range in forward direction. Specification: TS.RANGE . Reverse direction is not required as can be adjusted on Grafana panel.","title":"TS.RANGE"},{"location":"redis-datasource/TS-RANGE.html#tsrange","text":"Query a range in forward direction. Specification: TS.RANGE . Reverse direction is not required as can be adjusted on Grafana panel.","title":"TS.RANGE"},{"location":"redis-datasource/commands.html","text":"Redis Data Source supports \u00b6 Redis Data Source supports core Redis, custom and Redis Modules commands: RedisTimeSeries - Time Series data structure RedisGears - Dynamic framework for data processing RedisGraph - Graph database RediSearch - Secondary Index & Query Engine Core (Hashes, Sets, Lists, Strings, Streams, etc.) \u00b6 CLIENT LIST - Returns information and statistics about the client connections server CLUSTER INFO - Provides INFO style information about Redis Cluster vital parameters CLUSTER NODES - Provides current cluster configuration, given by the set of known nodes GET - Returns the value of key HGET - Returns the value associated with field in the hash stored at key HGETALL - Returns all fields and values of the hash stored at key HKEYS - Returns all field names in the hash stored at key HLEN - Returns the number of fields contained in the hash stored at key HMGET - Returns the values associated with the specified fields in the hash stored at key INFO - Returns information and statistics about the server LLEN - Returns the length of the list stored at key SCARD - Returns the set cardinality (number of elements) of the set stored at key SLOWLOG GET - Returns the Redis slow queries log SMEMBERS - Returns all the members of the set value stored at key TTL - Returns the string representation of the type of the value stored at key TYPE - Returns the string representation of the type of the value stored at key XINFO STREAM - Returns general information about the stream stored at the specified key XLEN - Returns the number of entries inside a stream XRANGE - Returns the stream entries matching a given range of IDs XREVRANGE - Returns the stream entries matching a given range of IDs in reverse order Custom \u00b6 TMSCAN - Returns keys with types and memory usage RedisTimeSeries \u00b6 TS.GET - Returns the last sample TS.INFO - Returns information and statistics on the time-series TS.MRANGE - Query a timestamp range across multiple time-series by filters TS.QUERYINDEX - Query all the keys matching the filter list TS.RANGE - Query a range RedisGears \u00b6 RG.DUMPREGISTRATIONS - Outputs the list of function registrations RG.PYSTATS - Returns memory usage statistics from the Python interpreter RedisGraph \u00b6 GRAPH.QUERY - Executes the given query against a specified graph GRAPH.SLOWLOG - Returns a list containing up to 10 of the slowest queries issued against the given graph ID RediSearch \u00b6 FT.INFO - Returns information and statistics on the index","title":"Supported commands"},{"location":"redis-datasource/commands.html#redis-data-source-supports","text":"Redis Data Source supports core Redis, custom and Redis Modules commands: RedisTimeSeries - Time Series data structure RedisGears - Dynamic framework for data processing RedisGraph - Graph database RediSearch - Secondary Index & Query Engine","title":"Redis Data Source supports"},{"location":"redis-datasource/commands.html#core-hashes-sets-lists-strings-streams-etc","text":"CLIENT LIST - Returns information and statistics about the client connections server CLUSTER INFO - Provides INFO style information about Redis Cluster vital parameters CLUSTER NODES - Provides current cluster configuration, given by the set of known nodes GET - Returns the value of key HGET - Returns the value associated with field in the hash stored at key HGETALL - Returns all fields and values of the hash stored at key HKEYS - Returns all field names in the hash stored at key HLEN - Returns the number of fields contained in the hash stored at key HMGET - Returns the values associated with the specified fields in the hash stored at key INFO - Returns information and statistics about the server LLEN - Returns the length of the list stored at key SCARD - Returns the set cardinality (number of elements) of the set stored at key SLOWLOG GET - Returns the Redis slow queries log SMEMBERS - Returns all the members of the set value stored at key TTL - Returns the string representation of the type of the value stored at key TYPE - Returns the string representation of the type of the value stored at key XINFO STREAM - Returns general information about the stream stored at the specified key XLEN - Returns the number of entries inside a stream XRANGE - Returns the stream entries matching a given range of IDs XREVRANGE - Returns the stream entries matching a given range of IDs in reverse order","title":"Core (Hashes, Sets, Lists, Strings, Streams, etc.)"},{"location":"redis-datasource/commands.html#custom","text":"TMSCAN - Returns keys with types and memory usage","title":"Custom"},{"location":"redis-datasource/commands.html#redistimeseries","text":"TS.GET - Returns the last sample TS.INFO - Returns information and statistics on the time-series TS.MRANGE - Query a timestamp range across multiple time-series by filters TS.QUERYINDEX - Query all the keys matching the filter list TS.RANGE - Query a range","title":"RedisTimeSeries"},{"location":"redis-datasource/commands.html#redisgears","text":"RG.DUMPREGISTRATIONS - Outputs the list of function registrations RG.PYSTATS - Returns memory usage statistics from the Python interpreter","title":"RedisGears"},{"location":"redis-datasource/commands.html#redisgraph","text":"GRAPH.QUERY - Executes the given query against a specified graph GRAPH.SLOWLOG - Returns a list containing up to 10 of the slowest queries issued against the given graph ID","title":"RedisGraph"},{"location":"redis-datasource/commands.html#redisearch","text":"FT.INFO - Returns information and statistics on the index","title":"RediSearch"},{"location":"redis-datasource/configuration.html","text":"Redis Data Source configuration \u00b6 Open Grafana in your browser and configure Redis Data Source. You can add as many data sources as you want to support multiple Redis databases. Redis Data Source can connect to Redis database as: Standalone Cluster Sentinel Unix Socket","title":"Configuration"},{"location":"redis-datasource/configuration.html#redis-data-source-configuration","text":"Open Grafana in your browser and configure Redis Data Source. You can add as many data sources as you want to support multiple Redis databases. Redis Data Source can connect to Redis database as: Standalone Cluster Sentinel Unix Socket","title":"Redis Data Source configuration"},{"location":"redis-datasource/streaming.html","text":"Redis Data Source supported Streaming \u00b6 Work in Progress","title":"Streaming"},{"location":"redis-datasource/streaming.html#redis-data-source-supported-streaming","text":"Work in Progress","title":"Redis Data Source supported Streaming"}]}